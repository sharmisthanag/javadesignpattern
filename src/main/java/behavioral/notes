chain of responsibility pattern is a behavioral pattern that
decouples a request from a handling object in a chain of handlers until it is finally recognized
decoupling of sender and receiver.receiver contains reference to next receiver.this promotes loose coupling.
eg: java.util.Logging.log(),filter,securityChain filter in Spring
Design:Chain of receiver object,handler is interface based,concrete handler for implementation,each handler has reference
to the next

command pattern encapsulates each request as object.object oriented callback.sender decoupled from processor.
add undo functionality .example: implementation java.lang.Runnable.object per command.command interface.execute method.
inexecute method optional.use reflection.Command,Invoker,concrete command,receiver.object per command.class contains 'what'
encapsulate action.

Interpreter represents grammar.music notation,mathematical notation.used parse source code.
example: java.util.Pattern, java.text.Format.
Design:Abstract Expression,Interpret,Terminal Expression,NonTerminal Expression,Context,Client

Visitor pattern : choose when to separate algorithm from object.open close principle.e.g: java.lang.model.elementVisitor.Visitor
class contains the changes and specialization rather than changing the original object.backward compatibility
design: interface based.elements,

iterator pattern is a great pattern for providing navigation without exposing the structure of an object.traverse a container.
don't expose underlying structure.decouples algorithm.sequential.example: java.util.Iterator, Enumeration.
interface based,factory method based,independent,fail fast:2 iterator can't modify the underlying object without error being thrown.
enumeration is built safe.

Mediator pattern is used to define how objects interact with one another without having them refer to each other explicitly.
e.g: java.lang.Timer,java.lang.reflect.Method.Mediator knows about colleague,rather than colleague knowing about each other
Mediator,COncreteMediator.mediator handles compounding of commands.

Mememto pattern is used to externalize an object's state, usually to provide rollback functionality.
used to restore object to its previous state, externalize internal state.java.util.Date,java.io.Serializable.
this is class based,originator is the actual object of which we want to  creates actual memento,
caretaker manages copies or mememto that we have created (list of undo's available in menu),
mememto represents copies.mememto  consist of magic cookiemagic cookie is combination of field that is takes to recreate
or copy the state of the oject and stored inside mememto.

Observer is a decoupling pattern when we have a subject to be observed by one or more observers.
this is chosen when there is subject with one or many observers,
event handling(pub-sub:async fashion/observer used in synchronous fashion)
eg.: java.util.Observer.java.util.EvenListener,javax.jms.Topic
Subject,Observer,Observable,views are observer:subject,concreteSubject,Observer,ConcreteObserver

State design pattern is used when we need to represent State in an application.To localize state specific behaviour.
current application state is stored in an object rather than a mix variables through out your application.
WHAT state we are in rather than WHERE.open close principle.reduces cyclomatic complexity by reducing if/else condition

Strategy pattern is used to enable the strategy or algorithm at runtime.eliminate conditional statement .
it encapsulate algorithm/behavior in classes.eliminate conditional statements in our application.
difficult to add new strategies.client aware of  the strategies.e.g: java.util.comparator(various comparator strategies.)
strategies are independent.URMl:context,strategy,concreteStrategy

Template design pattern is used to define an algorithm that allows sub-classes to redefine part of the algorithm
without changing its structure.
e.g: java.util.Collections#sort(): class implements Comparable public int compareTo(Person person)
java.util.AbstractList#indexOf()

